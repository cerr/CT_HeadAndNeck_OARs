from .base_options import BaseOptions


class TrainOptions(BaseOptions):
    def initialize(self):
        BaseOptions.initialize(self)
        self.parser.add_argument('--display_freq', type=int, default=200, help='frequency of showing training results on screen')
        self.parser.add_argument('--ct_seg_val_freq', type=int, default=2000, help='frequency of showing training results on screen')
        self.parser.add_argument('--CT_merge_alpha', type=float, default=0.25, help='frequency of showing training results on screen')
        self.parser.add_argument('--display_single_pane_ncols', type=int, default=0, help='if positive, display all images in a single visdom web panel with certain number of images per row.')
        self.parser.add_argument('--update_html_freq', type=int, default=1000, help='frequency of saving training results to html')
        self.parser.add_argument('--print_freq', type=int, default=200, help='frequency of showing training results on console')
        self.parser.add_argument('--save_latest_freq', type=int, default=2000, help='frequency of saving the latest results')
        self.parser.add_argument('--save_epoch_freq', type=int, default=1, help='frequency of saving checkpoints at the end of epochs')
        self.parser.add_argument('--continue_train', action='store_true', help='continue training: load the latest model')
        self.parser.add_argument('--epoch_count', type=int, default=1, help='the starting epoch count, we save the model by <epoch_count>, <epoch_count>+<save_latest_freq>, ...')
        self.parser.add_argument('--phase', type=str, default='train', help='train, val, test, etc')
        self.parser.add_argument('--which_epoch', type=str, default='latest', help='which epoch to load? set to latest to use latest cached model')
        self.parser.add_argument('--optimizer', type=str, default='Adam', help='which epoch to load? set to latest to use latest cached model')
        self.parser.add_argument('--niter', type=int, default=100, help='# of iter at starting learning rate')
        self.parser.add_argument('--bathsize_adj_lr', type=int, default=0, help='# adjust initial lr by lr=lr*batch_size')
        self.parser.add_argument('--niter_decay', type=int, default=100, help='# of iter to linearly decay learning rate to zero')
        self.parser.add_argument('--beta1', type=float, default=0.5, help='momentum term of adam')
        self.parser.add_argument('--lr', type=float, default=0.0002, help='initial learning rate for adam')
        self.parser.add_argument('--stn_lr', type=float, default=0.00002, help='initial learning rate for adam')
        self.parser.add_argument('--no_lsgan', action='store_true', help='do *not* use least square GAN, if false, use vanilla GAN')
        self.parser.add_argument('--use_aug', type=int, default=0,help='do *not* use augmentation on training data')    
        self.parser.add_argument('--medisum', type=int, default=0,help='check whether only validated on Medisum tumor')    
        self.parser.add_argument('--lambda_A', type=float, default=10.0, help='weight for cycle loss (A -> B -> A)')
        self.parser.add_argument('--lambda_B', type=float, default=10.0, help='weight for cycle loss (B -> A -> B)')
        self.parser.add_argument('--SegLambda_A',type=float,default=5,help='seg_weight for A')
        self.parser.add_argument('--StyleLambda_A',type=float,default=2,help='style_weight for A')
        self.parser.add_argument('--StyleLambda_B',type=float,default=2,help='style_weight for B')
        self.parser.add_argument('--SegLambda_B',type=float,default=5,help='seg_weight for B')
        self.parser.add_argument('--lambda_GA',type=float,default=1,help='GA for GA')       
        self.parser.add_argument('--FeatureLambda',type=float,default=5,help='feature lambda to keep feature of two streams')        
        self.parser.add_argument('--Load_CT_Weight_Seg_A',type=str,default='/lila/data/deasy/Eric_Data/gan_related/circle_GAN1/pytorch-CycleGAN-and-pix2pix/checkpoints_unet/maps_cyclegan/seg_CT/latest',help='pretrained_seg_parameters for Seg_A')                
        self.parser.add_argument('--pool_size', type=int, default=50, help='the size of image buffer that stores previously generated images')
        self.parser.add_argument('--no_html', action='store_true', help='do not save intermediate training results to [opt.checkpoints_dir]/[opt.name]/web/')
        self.parser.add_argument('--lr_policy', type=str, default='lambda', help='learning rate policy: lambda|step|plateau')
        self.parser.add_argument('--lr_decay_iters', type=int, default=50, help='multiply by a gamma every lr_decay_iters iterations')
        self.parser.add_argument('--mri_D', type=int, default=1, help='use D to filter MRI')
        self.parser.add_argument('--use_D_positive', type=int, default=0, help='use D to filter MRI')
        self.parser.add_argument('--freez_G', type=int, default=0, help='use D to filter MRI')
        self.parser.add_argument('--use_D_minimus', type=int, default=0, help='use D to filter MRI')
        self.parser.add_argument('--lambda_feature', type=float, default=0.1, help='feature constraints weight on the two model')
        self.parser.add_argument('--MMD_FeatureLambda', type=float, default=0.1, help='MMD_feature constraints weight on the two model')      
        self.parser.add_argument('--use_feature_loss', type=int, default=1, help='whether use feature loss')
        self.parser.add_argument('--sb_batch_per_gpu', type=int, default=1, help='batches per gpu when multi-gpu used')        
        self.parser.add_argument('--use_style_loss', type=int, default=0, help='whether use feature loss')
        self.parser.add_argument('--use_MMD_feature', type=int, default=0, help='whether use feature loss')      
        self.parser.add_argument('--identity', type=float, default=0.5, help='use identity mapping. Setting identity other than 1 has an effect of scaling the weight of the identity mapping loss. For example, if the weight of the identity loss should be 10 times smaller than the weight of the reconstruction loss, please set optidentity = 0.1')
        self.isTrain = True

        # parameters for block self attention
        self.parser.add_argument('--location', type=str, default='penultimate', help='location of the layer: penultimate|last')
        self.parser.add_argument('--B', type=int, default=12, help='Block size')
        self.parser.add_argument('--S', type=int, default=2, help='Stride size')
        self.parser.add_argument('--K', type=int, default=3, help='Kernel size')


        
